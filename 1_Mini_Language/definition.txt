Statement: Considering a small programming language (that we shall call mini-langauge), you have to write a scanner (lexical analyzer). 

For this lab, I will try to use C++ as the language I lookup to.

-- BNF

Language definition:

    <uppercase> ::= "A" | "B" | ... | "Z"
    <lowercase> ::= "a" | "b" | ... | "z"
    <digit> ::= "0" | "1" | ... | "9"
    <whitespace> ::= " "

Special characters:

    <operator> ::= "+" | "-" | "*" | "/" | "=" | "==" | "!=" | "<" | "<=" | ">" | ">=" | "&&" | "||" | "!"
    <assignment> ::= "="
    <separator> ::= ";" | "," | "(" | ")" | "{" | "}" | "[" | "]" | <whitespace>
    <quote> ::= "\""

Lexic:

    <keyword> ::= "int" | "float" | "char" | "if" | "else" | "while" | "for" | "return" | "class" | "void" | "const" | "new" | "delete" | "true" | "false"
    <basic_type> ::= "int" | "float" | "char"
    <control_statement> ::= "if" | "else" | "while" | "for" | "return"
    <boolean_literal> ::= "true" | "false"

Identifiers:

    <identifier> ::= <letter> {<letter> | <digit>}
    <letter> ::= <uppercase> | <lowercase>

Constants:

    <int_const> ::= ["+" | "-"] <digit> {<digit>}
    <char_const> ::= "'" (<letter> | <digit>) "'"
    <string_const> ::= <quote> {<char>} <quote>
    <char> ::= <letter> | <digit> | <special_character>
    <special_character> ::= "+" | "-" | "*" | "/" | ...

Statements:

    <program> ::= "class" <identifier> "{" <decllist> <stmtlist> "}"
    <decllist> ::= <declaration> | <declaration> ";" <decllist>
    <declaration> ::= <type> <identifier_list>
    <type> ::= "int" | "float" | "char" | "void" | "bool" | <user_defined_type>
    <identifier_list> ::= <identifier> | <identifier> "," <identifier_list>
    <user_defined_type> ::= "class" <identifier> "{" <decllist> "}"
    <stmtlist> ::= <stmt> | <stmt> ";" <stmtlist>
    <stmt> ::= <simplstmt> | <structstmt>
    <simplstmt> ::= <assignstmt> | <iostmt> | <returnstmt>
    <structstmt> ::= <ifstmt> | <whilestmt> | <forstmt> | <cmpdstmt>
    <cmpdstmt> ::= "{" <stmtlist> "}"
    <assignstmt> ::= <identifier> "=" <expression>
    <iostmt> ::= "read" "(" <identifier> ")" | "write" "(" <expression> ")"
    <ifstmt> ::= "if" "(" <condition> ")" <stmt> ["else" <stmt>]
    <whilestmt> ::= "while" "(" <condition> ")" <stmt>
    <returnstmt> ::= "return" [<expression>]
    <expression> ::= <expression> "+" <term> | <expression> "-" <term> | <term>
    <term> ::= <term> "*" <factor> | <term> "/" <factor> | <factor>
    <factor> ::= <identifier> | <int_const> | <char_const> | <string_const> | "(" <expression> ")"
    <condition> ::= <expression> <RELATION> <expression>
    <RELATION> ::= "==" | "!=" | "<" | "<=" | ">" | ">="






